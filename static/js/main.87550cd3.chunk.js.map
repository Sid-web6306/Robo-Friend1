{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","username","CardList","robots","cardArray","map","user","i","key","Search","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","isPending","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.87550cd3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?100x100`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t\t<p>{props.username}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card.js'\r\nconst CardList = ({robots}) => {\r\n\tconst cardArray = robots.map((user,i) =>{\r\n\t\treturn <Card key = {i} id={robots[i].id} username={robots[i].username} name ={robots[i].name} email={robots[i].email} />\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray};\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Search = (props) =>\r\n{\r\n\treturn (\r\n\t\t<div className='pa2' >\r\n\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype=\"search\" placeholder=\"search robots\"\r\n\t\t\tonChange={props.searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Search;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style ={{overflowY : 'scroll', border: '1px solid black' , height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>OOOOPS!! THAT IS NOT GOOD.</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Search from '../components/Search';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport {setSearchField,requestRobots} from '../actions';\r\nconst mapStateToProps= (state) =>{\r\n\treturn{\r\n\t\tsearchField:state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n\treturn {onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n\t\t\tonRequestRobots:()=> dispatch(requestRobots())\r\n\t\r\n\t\r\n\t\r\n\t}\r\n}\r\n// STATE (manipulation between siblings) ::REMEMBER\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n  \t}\r\n\r\n\trender() {\t\r\n\t\tconst {searchField,robots,isPending,onSearchChange} = this.props;\r\n\t\tconst filterRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1 className='tc'>Loading...</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<Search searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t    </div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nexport const setSearchField=(text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\n\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS ,payload: data}))\r\n      .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING= 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\n\r\nconst initialState = {\r\n    searchField:\" \",\r\n}\r\n\r\nexport const searchRobots = (state=initialState,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n             return {...state,searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: true\r\n  }\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state,isPending:true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return{...state, robots: action.payload, isPending:false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return{...state,error:action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware , combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger'\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots,requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\n\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}><App/></Provider>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}